{
  "version": 3,
  "sources": ["../../src/tools/get-profiles.ts", "../../src/components/ChromeProfileDropdown.tsx", "../../src/util/index.ts", "../../src/constants/index.ts"],
  "sourcesContent": ["import { loadChromeProfiles } from \"../components/ChromeProfileDropdown\";\n\nexport default async function () {\n  const profiles = await loadChromeProfiles();\n  return profiles;\n}\n", "import { List } from \"@raycast/api\";\nimport { useEffect } from \"react\";\nimport { useCachedPromise, useCachedState } from \"@raycast/utils\";\nimport { existsSync, promises } from \"fs\";\nimport { getLocalStatePath } from \"../util\";\nimport { ChromeProfile } from \"../interfaces\";\nimport { DEFAULT_CHROME_PROFILE_ID, CHROME_PROFILE_KEY, CHROME_PROFILES_KEY } from \"../constants\";\n\ninterface Props {\n  onProfileSelected?: (profile: string) => void;\n}\n\nexport async function loadChromeProfiles(): Promise<ChromeProfile[]> {\n  const path = getLocalStatePath();\n  if (!existsSync(path)) {\n    return [{ name: \"Default\", id: \"Default\" }];\n  }\n\n  const chromeState = await promises.readFile(path, \"utf-8\");\n  const profiles = JSON.parse(chromeState).profile.info_cache;\n  return Object.entries<{ name: string }>(profiles).map(([key, val]) => ({\n    name: val.name,\n    id: key,\n  }));\n}\n\nexport default function ChromeProfileDropDown({ onProfileSelected }: Props) {\n  const [selectedProfile, setSelectedProfile] = useCachedState<string>(CHROME_PROFILE_KEY, DEFAULT_CHROME_PROFILE_ID);\n  const [profiles, setProfiles] = useCachedState<ChromeProfile[]>(CHROME_PROFILES_KEY, [\n    { name: \"Person 1\", id: DEFAULT_CHROME_PROFILE_ID },\n  ]);\n  const { data: loadedProfiles } = useCachedPromise(loadChromeProfiles);\n\n  useEffect(() => {\n    if (loadedProfiles) {\n      setProfiles(loadedProfiles);\n      if (!selectedProfile) {\n        if (loadedProfiles.length > 0) {\n          setSelectedProfile(loadedProfiles[0].id);\n        } else {\n          setSelectedProfile(DEFAULT_CHROME_PROFILE_ID);\n        }\n      }\n    }\n  }, [loadedProfiles]);\n\n  useEffect(() => {\n    if (selectedProfile) {\n      onProfileSelected?.(selectedProfile);\n    }\n  }, [selectedProfile]);\n\n  if (!profiles || profiles.length < 2) {\n    return null;\n  }\n\n  return (\n    <List.Dropdown tooltip=\"Select Chrome Profile\" value={selectedProfile} onChange={setSelectedProfile}>\n      {profiles.map((profile) => (\n        <List.Dropdown.Item key={profile.id} value={profile.id} title={profile.name} />\n      ))}\n    </List.Dropdown>\n  );\n}\n", "import fs from \"fs\";\nimport path from \"path\";\nimport {\n  DEFAULT_CHROME_PROFILE_ID,\n  defaultChromeProfilePath,\n  defaultChromeStatePath,\n  NO_BOOKMARKS_MESSAGE,\n} from \"../constants\";\nimport { getPreferenceValues } from \"@raycast/api\";\nimport { Preferences } from \"../interfaces\";\nimport { BookmarkDirectory, HistoryEntry, RawBookmarks } from \"../interfaces\";\n\ntype ChromeFile = \"History\" | \"Bookmarks\";\nconst userLibraryDirectoryPath = () => {\n  if (!process.env.HOME) {\n    throw new Error(\"$HOME environment variable is not set.\");\n  }\n\n  return path.join(process.env.HOME, \"Library\");\n};\nconst getChromeFilePath = (fileName: ChromeFile, profile?: string) => {\n  const { profilePath } = getPreferenceValues<Preferences>();\n  let resolvedProfilePath;\n  if (profilePath) {\n    resolvedProfilePath = path.join(profilePath, fileName);\n  } else {\n    resolvedProfilePath = path.join(\n      userLibraryDirectoryPath(),\n      ...defaultChromeProfilePath,\n      profile ?? DEFAULT_CHROME_PROFILE_ID,\n      fileName,\n    );\n  }\n\n  return resolvedProfilePath;\n};\n\nexport const getHistoryDbPath = (profile?: string) => getChromeFilePath(\"History\", profile);\n\nexport const getLocalStatePath = () => path.join(userLibraryDirectoryPath(), ...defaultChromeStatePath);\n\nconst getBookmarksFilePath = (profile?: string) => getChromeFilePath(\"Bookmarks\", profile);\n\nfunction extractBookmarkFromBookmarkDirectory(bookmarkDirectory: BookmarkDirectory): HistoryEntry[] {\n  const bookmarks: HistoryEntry[] = [];\n\n  if (bookmarkDirectory.type === \"folder\") {\n    bookmarkDirectory.children.forEach((child) => {\n      bookmarks.push(...extractBookmarkFromBookmarkDirectory(child));\n    });\n  } else if (bookmarkDirectory.type === \"url\" && bookmarkDirectory.url) {\n    bookmarks.push({\n      id: bookmarkDirectory.id,\n      url: bookmarkDirectory.url,\n      title: bookmarkDirectory.name,\n      lastVisited: new Date(bookmarkDirectory.date_added),\n    });\n  }\n  return bookmarks;\n}\n\nconst extractBookmarks = (rawBookmarks: RawBookmarks): HistoryEntry[] => {\n  const bookmarks: HistoryEntry[] = [];\n  Object.keys(rawBookmarks.roots).forEach((rootKey) => {\n    const rootLevelBookmarkFolders = rawBookmarks.roots[rootKey];\n    const bookmarkEntries = extractBookmarkFromBookmarkDirectory(rootLevelBookmarkFolders);\n    bookmarks.push(...bookmarkEntries);\n  });\n  return bookmarks;\n};\n\nexport const getBookmarks = async (profile?: string): Promise<HistoryEntry[]> => {\n  const bookmarksFilePath = getBookmarksFilePath(profile);\n  if (!fs.existsSync(bookmarksFilePath)) {\n    throw new Error(NO_BOOKMARKS_MESSAGE);\n  }\n\n  const fileBuffer = await fs.promises.readFile(bookmarksFilePath, { encoding: \"utf-8\" });\n  return extractBookmarks(JSON.parse(fileBuffer));\n};\n\nexport const getDefaultProfileID = () => {\n  try {\n    const path = getLocalStatePath();\n    const chromeState = fs.readFileSync(path, \"utf-8\");\n    const profiles = JSON.parse(chromeState).profile.info_cache;\n    return Object.keys(profiles)[0];\n  } catch {\n    return \"Default\";\n  }\n};\n", "import fs from \"fs\";\nimport { getLocalStatePath } from \"../util\";\n\nconst getDefaultProfileID = () => {\n  try {\n    const path = getLocalStatePath();\n    const chromeState = fs.readFileSync(path, \"utf-8\");\n    const profiles = JSON.parse(chromeState).profile.info_cache;\n    if (!profiles) {\n      return \"Default\";\n    }\n    return Object.keys(profiles)[0];\n  } catch {\n    return \"Default\";\n  }\n};\n\nexport const defaultChromeProfilePath = [\"Application Support\", \"Google\", \"Chrome\"];\nexport const defaultChromeStatePath = [\"Application Support\", \"Google\", \"Chrome\", \"Local State\"];\nexport const DEFAULT_CHROME_PROFILE_ID = getDefaultProfileID();\nexport const CHROME_PROFILE_KEY = \"CHROME_PROFILE_KEY\";\nexport const CHROME_PROFILES_KEY = \"CHROME_PROFILES_KEY\";\n\nexport const DownloadText = `\n  # \uD83D\uDEA8Error: Google Chrome browser is not installed\n  ## This extension depends on Google Chrome browser. You must install it to continue.\n\n  If you have [Homebrew](https://brew.sh/) installed then press \u23CE (Enter Key) to install Google Chrome browser.\n\n  [Click here](https://www.google.com/chrome/) if you want to download manually.\n\n  [![Google Chrome](https://www.google.com/chrome/static/images/chrome-logo-m100.svg)]()\n`;\n\nexport const NoBookmarksText = `\n# \uD83D\uDEA8Error: Google Chrome browser has no bookmarks. Please add some bookmarks to continue using this command.\n\n[![Google Chrome](https://www.google.com/chrome/static/images/chrome-logo-m100.svg)]()\n`;\n\nexport const UnknownErrorText = `\n# \uD83D\uDEA8Error: Something happened while trying to run your command\n\n[![Google Chrome](https://www.google.com/chrome/static/images/chrome-logo-m100.svg)]()\n`;\n\nexport const DEFAULT_ERROR_TITLE = \"An Error Occurred\";\n\nexport const NOT_INSTALLED_MESSAGE = \"Google Chrome not installed\";\nexport const NO_BOOKMARKS_MESSAGE = \"Google Chrome has no bookmarks.\";\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAqB,wBACrBC,EAA0B,iB,uFAE1B,IAAAC,EAAqC,cCFrC,IAAAC,EAAiB,mBCDjB,IAAAC,EAAe,iBAGf,IAAMC,EAAsB,IAAM,CAChC,GAAI,CACF,IAAMC,EAAOC,EAAkB,EACzBC,EAAc,EAAAC,QAAG,aAAaH,EAAM,OAAO,EAC3CI,EAAW,KAAK,MAAMF,CAAW,EAAE,QAAQ,WACjD,OAAKE,EAGE,OAAO,KAAKA,CAAQ,EAAE,CAAC,EAFrB,SAGX,MAAQ,CACN,MAAO,SACT,CACF,EAGO,IAAMC,EAAyB,CAAC,sBAAuB,SAAU,SAAU,aAAa,EAClFC,EAA4BC,EAAoB,EDX7D,IAAAC,EAAoC,wBAK9BC,EAA2B,IAAM,CACrC,GAAI,CAAC,QAAQ,IAAI,KACf,MAAM,IAAI,MAAM,wCAAwC,EAG1D,OAAO,EAAAC,QAAK,KAAK,QAAQ,IAAI,KAAM,SAAS,CAC9C,EAoBO,IAAMC,EAAoB,IAAM,EAAAC,QAAK,KAAKC,EAAyB,EAAG,GAAGC,CAAsB,EDoB9F,IAAAC,EAAA,6BA/CR,eAAsBC,GAA+C,CACnE,IAAMC,EAAOC,EAAkB,EAC/B,GAAI,IAAC,cAAWD,CAAI,EAClB,MAAO,CAAC,CAAE,KAAM,UAAW,GAAI,SAAU,CAAC,EAG5C,IAAME,EAAc,MAAM,WAAS,SAASF,EAAM,OAAO,EACnDG,EAAW,KAAK,MAAMD,CAAW,EAAE,QAAQ,WACjD,OAAO,OAAO,QAA0BC,CAAQ,EAAE,IAAI,CAAC,CAACC,EAAKC,CAAG,KAAO,CACrE,KAAMA,EAAI,KACV,GAAID,CACN,EAAE,CACJ,CDtBA,eAAOE,GAA0B,CAE/B,OADiB,MAAMC,EAAmB,CAE5C",
  "names": ["get_profiles_exports", "__export", "get_profiles_default", "__toCommonJS", "import_api", "import_react", "import_fs", "import_path", "import_fs", "getDefaultProfileID", "path", "getLocalStatePath", "chromeState", "fs", "profiles", "defaultChromeStatePath", "DEFAULT_CHROME_PROFILE_ID", "getDefaultProfileID", "import_api", "userLibraryDirectoryPath", "path", "getLocalStatePath", "path", "userLibraryDirectoryPath", "defaultChromeStatePath", "import_jsx_runtime", "loadChromeProfiles", "path", "getLocalStatePath", "chromeState", "profiles", "key", "val", "get_profiles_default", "loadChromeProfiles"]
}
